package com.justlearn.utils

import android.annotation.SuppressLint
import android.content.Context
import android.provider.Settings.Secure
import android.telephony.TelephonyManager
import java.io.UnsupportedEncodingException
import java.util.*

@SuppressLint("HardwareIds")
class DeviceUuidFactory(context: Context) {

    companion object {
        private const val PREFS_FILE = "device_id.xml"
        private const val PREFS_DEVICE_ID = "device_id"
        @Volatile private var uuid: UUID? = null
    }

    init {
        if (uuid == null) {
            synchronized(DeviceUuidFactory::class.java) {
                if (uuid == null) {
                    val prefs = context.getSharedPreferences(PREFS_FILE, 0)
                    val id = prefs.getString(PREFS_DEVICE_ID, null)

                    if (id != null) {
                        // Use the ids previously computed and stored in the prefs file
                        uuid = UUID.fromString(id)
                    } else {
                        val androidId = Secure.getString(context.contentResolver, Secure.ANDROID_ID)

                        // Use the Android ID unless it's broken, in which case fallback on deviceId,
                        // unless it's not available, then fallback on a random number which we store
                        // to a prefs file
                        try {
                            if (androidId != "9774d56d682e549c") {
                                uuid = UUID.nameUUIDFromBytes(androidId.toByteArray(Charsets.UTF_8))
                            } else {
                                val deviceId =
                                    (context.getSystemService(Context.TELEPHONY_SERVICE) as? TelephonyManager)?.deviceId
                                uuid = deviceId?.let {
                                    UUID.nameUUIDFromBytes(it.toByteArray(Charsets.UTF_8))
                                } ?: UUID.randomUUID()
                            }
                        } catch (e: UnsupportedEncodingException) {
                            throw RuntimeException(e)
                        }

                        // Write the value out to the prefs file
                        prefs.edit().putString(PREFS_DEVICE_ID, uuid.toString()).apply()
                    }
                }
            }
        }
    }

    /**
     * Returns a unique UUID for the current Android device. As with all UUIDs, this unique ID is "very highly likely"
     * to be unique across all Android devices. Much more so than ANDROID_ID is.
     *
     * The UUID is generated by using ANDROID_ID as the base key if appropriate, falling back on
     * TelephonyManager.getDeviceID() if ANDROID_ID is known to be incorrect, and finally falling back
     * on a random UUID that's persisted to SharedPreferences if getDeviceID() does not return a
     * usable value.
     *
     * In some rare circumstances, this ID may change. In particular, if the device is factory reset a new device ID
     * may be generated. In addition, if a user upgrades their phone from certain buggy implementations of Android 2.2
     * to a newer, non-buggy version of Android, the device ID may change. Or, if a user uninstalls your app on
     * a device that has neither a proper Android ID nor a Device ID, this ID may change on reinstallation.
     *
     * Note that if the code falls back on using TelephonyManager.getDeviceId(), the resulting ID will NOT
     * change after a factory reset. Something to be aware of.
     *
     * Works around a bug in Android 2.2 for many devices when using ANDROID_ID directly.
     *
     * @see http://code.google.com/p/android/issues/detail?id=10603
     *
     * @return a UUID that may be used to uniquely identify your device for most purposes.
     */
    fun getDeviceUuid(): UUID? {
        return uuid
    }
}
